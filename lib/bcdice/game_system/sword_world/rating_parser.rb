#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'


require "bcdice/arithmetic/node"
require "bcdice/enum"
require "bcdice/game_system/sword_world/rating_lexer"
require "bcdice/game_system/sword_world/rating_parsed"

# SwordWorldの威力表コマンドをパースするクラス
module BCDice
  module GameSystem
    class SwordWorld < Base

class RatingParser < Racc::Parser


# デフォルトの丸めを切り上げとしているが、SwordWorldには切り捨てもあるので決め切れない（四捨五入は現状ない）
def initialize(version: :v1_0, round_type: RoundType::CEIL)
  super()
  @version = version
  @round_type = round_type
end

def set_debug
  @yydebug = true
  return self
end

# @param source [String]
# @return [BCDice::GameSystem::SwordWorld::RatingParsed, nil]
def parse(source)
  @lexer = RatingLexer.new(source)
  do_parse()
rescue ParseError, ZeroDivisionError
  nil
end

private

def parsed(rate, modifier, option)
  RatingParsed.new.tap do |p|
    p.rate = rate
    p.critical = option[:critical]&.eval(@round_type)
    p.kept_modify = option[:kept_modify]&.eval(@round_type)
    p.first_to = option[:first_to]
    p.first_modify = option[:first_modify]
    p.rateup = option[:rateup]&.eval(@round_type)
    p.greatest_fortune = option.fetch(:greatest_fortune, false)
    p.modifier = modifier.eval(@round_type)
    p.modifier_after_half = option[:modifier_after_half]&.eval(@round_type)
  end
end

def next_token
  @lexer.next_token
end

##### State transition tables begin ###

racc_action_table = [
    15,    14,    16,     5,    18,    19,    51,    52,    21,    22,
    11,    53,    12,    17,    13,    15,    14,    16,     4,    18,
    19,     4,     8,     3,    28,    11,    28,    12,    17,    13,
    24,    25,    24,    25,    27,    28,    27,    28,    49,    50,
     9,    24,    25,    24,    25,    27,    28,    27,    28,    49,
    50,    35,    24,    25,    24,    25,    27,    28,    27,    28,
    49,    50,    42,    24,    25,    24,    25,    27,    28,    27,
    28,    49,    50,    47,    24,    25,    24,    25,    27,    28,
    27,    28,    49,    50,    48,    24,    25,    24,    25,    27,
    28,    27,    28,    49,    50,   nil,    24,    25,    24,    25,
    27,    28,    27,    28,    49,    50,   nil,    24,    25,    24,
    25,    27,    30,    27,   nil,   nil,   nil,   nil,    31,    32 ]

racc_action_check = [
     6,     6,     6,     1,     6,     6,    45,    45,    10,    10,
     6,    45,     6,     6,     6,    20,    20,    20,     3,    20,
    20,     0,     4,     0,    11,    20,    12,    20,    20,    20,
    11,    11,    12,    12,    11,    14,    12,    15,    37,    37,
     5,    14,    14,    15,    15,    14,    17,    15,    18,    39,
    39,    16,    17,    17,    18,    18,    17,    19,    18,    21,
    40,    40,    23,    19,    19,    21,    21,    19,    22,    21,
    24,    41,    41,    31,    22,    22,    24,    24,    22,    25,
    24,    27,    46,    46,    32,    25,    25,    27,    27,    25,
    49,    27,    50,    56,    56,   nil,    49,    49,    50,    50,
    49,    51,    50,    52,    57,    57,   nil,    51,    51,    52,
    52,    51,    13,    52,   nil,   nil,   nil,   nil,    13,    13 ]

racc_action_pointer = [
    18,     3,   nil,    15,    20,    40,    -4,   nil,   nil,   nil,
     0,    22,    24,   110,    33,    35,    44,    44,    46,    55,
    11,    57,    66,    47,    68,    77,   nil,    79,   nil,   nil,
   nil,    71,    82,   nil,   nil,   nil,   nil,    28,   nil,    39,
    50,    61,   nil,   nil,   nil,    -2,    72,   nil,   nil,    88,
    90,    99,   101,   nil,   nil,   nil,    83,    94 ]

racc_action_default = [
   -31,   -31,    -4,   -31,   -31,   -31,    -1,    -4,    -3,    58,
    -5,   -31,   -31,   -31,   -11,   -31,   -31,   -31,   -31,   -31,
    -2,   -31,   -31,   -31,   -31,   -31,   -28,   -31,   -30,    -7,
    -8,   -31,   -31,   -12,   -13,   -14,   -15,   -16,   -25,   -17,
   -18,   -19,    -6,   -26,   -27,   -31,   -22,    -9,   -10,   -31,
   -31,   -31,   -31,   -29,   -23,   -24,   -20,   -21 ]

racc_goto_table = [
    23,    29,     2,    33,    34,     7,    36,    37,    39,     1,
    40,    41,     6,    43,    44,    45,    46,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,    55,
    56,    57 ]

racc_goto_check = [
     5,     5,     2,     5,     5,     2,     5,     6,     6,     1,
     6,     6,     3,     5,     5,     7,     6,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,     5,
     6,     6 ]

racc_goto_pointer = [
   nil,     9,     2,    10,   nil,   -11,   -11,   -12,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    10,    38,   nil,   nil,    26 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 20, :_reduce_1,
  3, 20, :_reduce_2,
  2, 21, :_reduce_3,
  0, 22, :_reduce_4,
  2, 22, :_reduce_5,
  4, 22, :_reduce_6,
  3, 22, :_reduce_7,
  3, 22, :_reduce_8,
  4, 22, :_reduce_9,
  4, 22, :_reduce_10,
  2, 22, :_reduce_11,
  3, 22, :_reduce_12,
  3, 22, :_reduce_13,
  3, 22, :_reduce_14,
  3, 22, :_reduce_15,
  2, 23, :_reduce_16,
  2, 23, :_reduce_17,
  3, 23, :_reduce_18,
  3, 23, :_reduce_19,
  3, 26, :_reduce_20,
  3, 26, :_reduce_21,
  1, 26, :_reduce_none,
  3, 25, :_reduce_23,
  3, 25, :_reduce_24,
  1, 25, :_reduce_none,
  2, 24, :_reduce_26,
  2, 24, :_reduce_27,
  1, 24, :_reduce_none,
  3, 27, :_reduce_29,
  1, 27, :_reduce_30 ]

racc_reduce_n = 31

racc_shift_n = 58

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :K => 3,
  :R => 4,
  :H => 5,
  :G => 6,
  :F => 7,
  :PLUS => 8,
  :MINUS => 9,
  :ASTERISK => 10,
  :SLASH => 11,
  :PARENL => 12,
  :PARENR => 13,
  :BRACKETL => 14,
  :BRACKETR => 15,
  :AT => 16,
  :SHARP => 17,
  :DOLLAR => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "K",
  "R",
  "H",
  "G",
  "F",
  "PLUS",
  "MINUS",
  "ASTERISK",
  "SLASH",
  "PARENL",
  "PARENR",
  "BRACKETL",
  "BRACKETR",
  "AT",
  "SHARP",
  "DOLLAR",
  "$start",
  "expr",
  "rate",
  "option",
  "modifier",
  "unary",
  "mul",
  "add",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
          rate, option = val
          modifier = option[:modifier] || Arithmetic::Node::Number.new(0)
          result = parsed(rate, modifier, option)

    result
end

def _reduce_2(val, _values, result)
          _, rate, option = val
          option[:modifier_after_half] ||= Arithmetic::Node::Number.new(0)
          modifier = option[:modifier] || Arithmetic::Node::Number.new(0)
          result = parsed(rate, modifier, option)

    result
end

def _reduce_3(val, _values, result)
 result = val[1].to_i
    result
end

def _reduce_4(val, _values, result)
            result = {}

    result
end

def _reduce_5(val, _values, result)
            option, term = val
            raise ParseError unless option[:modifier].nil?

            option[:modifier] = term
            result = option

    result
end

def _reduce_6(val, _values, result)
            option, _, term, _ = val
            raise ParseError unless option[:critical].nil?

            option[:critical] = term
            result = option

    result
end

def _reduce_7(val, _values, result)
            option, _, term = val
            raise ParseError unless option[:critical].nil?

            option[:critical] = term
            result = option

    result
end

def _reduce_8(val, _values, result)
            option, _, term = val
            raise ParseError unless option[:first_to].nil? && option[:first_modify].nil?

            option[:first_to] = term.to_i
            result = option

    result
end

def _reduce_9(val, _values, result)
            option, _, _, term = val
            raise ParseError unless option[:first_to].nil? && option[:first_modify].nil?

            option[:first_modify] = term.to_i
            result = option

    result
end

def _reduce_10(val, _values, result)
            option, _, _, term = val
            raise ParseError unless option[:first_to].nil? && option[:first_modify].nil?

            option[:first_modify] = -(term.to_i)
            result = option

    result
end

def _reduce_11(val, _values, result)
            option, _ = val
            raise ParseError unless option[:modifier_after_half].nil?

            option[:modifier_after_half] = Arithmetic::Node::Number.new(0)
            result = option

    result
end

def _reduce_12(val, _values, result)
            option, _, term = val
            raise ParseError unless option[:modifier_after_half].nil?

            option[:modifier_after_half] = term
            result = option

    result
end

def _reduce_13(val, _values, result)
            option, _, term = val
            raise ParseError unless [:v2_5, :v2_0].include?(@version) && option[:rateup].nil?

            option[:rateup] = term
            result = option

    result
end

def _reduce_14(val, _values, result)
            option, _, _ = val
            raise ParseError unless [:v2_5, :v2_0].include?(@version) && option[:greatest_fortune].nil?

            option[:greatest_fortune] = true
            result = option

    result
end

def _reduce_15(val, _values, result)
            option, _, term = val
            raise ParseError unless @version == :v2_5 && option[:kept_modify].nil?

            option[:kept_modify] = term
            result = option

    result
end

def _reduce_16(val, _values, result)
 result = val[1]
    result
end

def _reduce_17(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

def _reduce_18(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_19(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

def _reduce_20(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_21(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])
    result
end

def _reduce_24(val, _values, result)
         result = Arithmetic::Node::DivideWithGameSystemDefault.new(val[0], val[2])

    result
end

# reduce 25 omitted

def _reduce_26(val, _values, result)
 result = val[1]
    result
end

def _reduce_27(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

# reduce 28 omitted

def _reduce_29(val, _values, result)
 result = val[1]
    result
end

def _reduce_30(val, _values, result)
 result = Arithmetic::Node::Number.new(val[0])
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RatingParser

    end
  end
end
